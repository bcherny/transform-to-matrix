// Generated by CoffeeScript 1.6.3
(function() {
  var css, div, dot, expect, getStyle, precision, rotate, round, runner, transformToMatrix;

  mocha.setup('bdd');

  transformToMatrix = window['transform-to-matrix'];

  expect = chai.expect;

  div = document.getElementById('test');

  precision = 100000;

  rotate = [[0, 4, 8, 12], [1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15]];

  round = function(mixed) {
    return Math.round(mixed * precision) / precision;
  };

  css = function(matrix) {
    var j, k, num, result, row, _i, _j, _len, _len1;
    result = [];
    for (j = _i = 0, _len = matrix.length; _i < _len; j = ++_i) {
      row = matrix[j];
      for (k = _j = 0, _len1 = row.length; _j < _len1; k = ++_j) {
        num = row[k];
        result[rotate[j][k]] = round(num);
      }
    }
    return result;
  };

  dot = function(matrix) {
    var def, j, k, num, result, row, _i, _j, _len, _len1;
    def = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    result = [[], [], [], []];
    for (j = _i = 0, _len = matrix.length; _i < _len; j = ++_i) {
      row = matrix[j];
      for (k = _j = 0, _len1 = row.length; _j < _len1; k = ++_j) {
        num = row[k];
        result[j][k] = num * def[j][0] + num * def[j][1] + num * def[j][2] + num * def[j][3];
      }
    }
    return result;
  };

  getStyle = function(transform) {
    var i, num, nums, style, _i, _len;
    div.style[annie.transform] = transform;
    style = getComputedStyle(div)[annie.transform].slice(9, -1);
    nums = style.split(', ');
    for (i = _i = 0, _len = nums.length; _i < _len; i = ++_i) {
      num = nums[i];
      nums[i] = round(num);
    }
    return nums;
  };

  describe('transform-to-matrix', function() {
    describe('#perspective', function() {
      return it('should compute the same 3D matrix as the browser', function() {
        var browser, ttm;
        ttm = css(transformToMatrix.perspective(10));
        browser = getStyle('perspective(10px)');
        return expect(ttm).to.eql(browser);
      });
    });
    describe('#rotate3d', function() {
      return it('should compute the same 3D matrix as the browser', function() {
        var browser, ttm;
        ttm = css(transformToMatrix.rotate3d(1, 0, 1, .5));
        browser = getStyle('rotate3d(1, 0, 1, .5rad)');
        return expect(ttm).to.eql(browser);
      });
    });
    describe('#scale3d', function() {
      return it('should compute the same 3D matrix as the browser', function() {
        var browser, ttm;
        ttm = css(transformToMatrix.scale3d(5, 10, 20));
        browser = getStyle('scale3d(5, 10, 20)');
        return expect(ttm).to.eql(browser);
      });
    });
    describe('#skew', function() {
      return it('should compute the same 3D matrix as the browser', function() {
        var browser, ttm;
        ttm = css(transformToMatrix.skew(.5, .7));
        browser = getStyle('skewX(.5rad) skewY(.7rad)');
        console.log(ttm, browser);
        return expect(ttm).to.eql(browser);
      });
    });
    return describe('#translate3d', function() {
      return it('should compute the same 3D matrix as the browser', function() {
        var browser, ttm;
        ttm = css(transformToMatrix.translate3d(10, 20, 30));
        browser = getStyle('translate3d(10px, 20px, 30px)');
        return expect(ttm).to.eql(browser);
      });
    });
  });

  runner = mocha.run();

}).call(this);
